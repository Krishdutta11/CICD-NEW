pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // Uncomment and fix the Git checkout command if needed
        // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
   stage('Build and Test') {
  steps {
    sh 'ls -ltr'
    // Update the path to match your repository structure
    sh 'cd spring-boot-app && mvn clean package'
  }
}
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.157.146.227:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "krishdutta1177/ultimate-cicd:${BUILD_NUMBER}"
        // Ensure REGISTRY_CREDENTIALS is used if needed
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "CICD-NEW"
        GIT_USER_NAME = "Krishdutta11"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            sh '''
              git config user.email "krishnakali.dutta1177@gmail.com"
              git config user.name "Krishdutta11"
              BUILD_NUMBER=${BUILD_NUMBER}
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" CICD-NEW/spring-boot-app-manifest/deployment.yml
              git add .
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              # Use Jenkins GitHub plugin for authenticated push
              git push origin HEAD:main
            '''
          }
        }
      }
    }
  }
}
